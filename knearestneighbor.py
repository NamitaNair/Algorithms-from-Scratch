# -*- coding: utf-8 -*-
"""KNearestNeighbor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yZGjjnZ-duI_Ty1BD3QeNN8cLSd3fAWj
"""

import numpy as np
from collections import Counter

class KNearestNeighbors:

  def __init__(self,n):  
    self.n = n
  
  def fit(self,X,y):
    self.X_train = X
    self.y_train = y
  
  def predict(self,x):
    distances = [self._calculate(x) for x in X_test]
    top_indices = [self._find_top_indices(d) for d in distances]
    classes = [self._find_classes(indices) for indices in top_indices]
    predictions = [self._predictions(c) for c in classes]
    return predictions

  def _calculate(self,x):
    distances = [np.sqrt(np.sum((x - x_train)**2)) for x_train in X_train]
    return distances
  
  def _find_top_indices(self,d):
    top_indices = np.argsort(d)[:self.n]
    return top_indices

  def _find_classes(self,indices):
    classes = [self.y_train[i] for i in indices]
    return classes

  def _predictions(self,classes):
    p = Counter(classes).most_common(1)
    predictions = p[0][0]
    return predictions

  def score(self,X_test,y_test):
    predictions = self.predict(self.X_test)
    accuracy = np.sum(predictions == y_test)/len(y_test)
    print("Accuracy: ",accuracy)